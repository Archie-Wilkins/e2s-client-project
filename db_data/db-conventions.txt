Naming Conventions:

Table names can be any length, however:

If the table name contains two words or more, spaces between words will be represented with a "_" character
If the table name contains two words or more, any words with more than 8 letters will be abbreviated to the first 3 letters (unless another amount makes more sense), excluding the first word.
If the table is a cross-reference table (ie supporting a many to many relationship) the table will be named [table1]-[table2]-crossref

Column names can have a max length of 30 characters and follow the following conventions:

If the column contains two words or more, spaces between words will be represented with a "_" character
If the table name contains two words or more, any words with more than 8 letters will be abbreviated to the first 3 letters (unless another amount makes more sense).


General Observations:

Ive changed the database collation from latin1_swedish_c1 to utf8mb4_general_ci due to a past experience with taking customer data. Swedish Ci occasionally doesnt play nice with
accented names, therefore, if a name that had accents in the user data was inserted into the table an error could occur. To fix this, i've changed the collation to utf8 
minimalizing this issue for the price of a slight drop in performance when sorting and searching.

Aside from cross reference tables, each table will have an auto incrementing id in the first column.
Foreign key columns will be identical in restriction and name to their original table counterparts. 
Im currently avoiding changing size restrictions on integer and varchar values unless there is obviously a problem (i.e for addresses). The defaults are 50 characters and
11 integers. If there is a problem further down the line or room for refinerement, it is fair to revise these restrictions. 

As of now, im not following a normalization strategy (However, the database would be somewhere between 2nf and 3nf as certain areas such as counties and addresses are repeatable,
yet this would be rare and therefore does not consitute a table of references).

All cross reference table entries are set to cascade should their parent be deleted.
Some foreign keys with one to one and one to many relationships also have cascade enabled, however, I did this on a case by case basis. 


Points of contention:

The following is pushed down the line:
TODO
- In the table for site energy data, what is the difference between usage and imported and as well as that output and exported.
- The units of each value in the table need to be looked at and for some tables (e.g energy asset data) the timeframes the units are used for also should be looked at.
- In many to many tables, look at making columns unique.
- energy asset data site crossref may not be neccesary as there is already a link there aka assets are linked to a room, rooms are linked to a site. Im making a big circle unnecesarily basically.
- Director id in organisations is useless for now but when users data is split it may become useful.

From Archie's comments:
- An agreed upon unit system is required for which each number has a unit
- Site data requests may not be neccesary down the line
- Storing reports needs to be considered down the line
- A reccomendations table will also likely be required down the line with a crossref to the site and/or organisation table


Possibility of splitting users table down the line - a separate table may be needed to store users with access to multiple sites. This would clear uo the many to many relationship between users and sites.
This would also further clean up the 1 director problem as it would allow me to identify it using a foreign key.